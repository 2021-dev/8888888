create schema out_param_schema;
set current_schema= out_param_schema;
set behavior_compat_options='proc_outparam_override';
--1--------return 变量
CREATE or replace FUNCTION func1(in a integer, out b integer)
RETURNS int
AS $$
DECLARE
    c int;
    BEGIN
        c := 1;
        b := a + c;
        return c;
    END; $$
LANGUAGE 'plsql' NOT FENCED;
WARNING:  Due to compatibility issues, plsql language has been replaced by plpgsql language. Do not use plsql language in the future.
DETAIL:  N/A.
select func1(2, null);
 func1 
-------
     1
(1 row)

call func1(2, NULL);
 func1 | b 
-------+---
     1 | 3
(1 row)

select * from func1(2,null);
 func1 | b 
-------+---
     1 | 3
(1 row)

declare
    result integer;
    a integer := 2;
    b integer := NULL;
begin 
    result := func1(a => a, b => b);  
    raise info 'b is: %', b;
    raise info 'result is: %', result;
end;
/
INFO:  b is: 3
INFO:  result is: 1
declare
    result integer;
    a integer := 2;
    b integer := NULL;
begin  
    func1(a => a, b => b);   
    raise info 'b is: %', b;
    raise info 'result is: %', result;
end;
/
INFO:  b is: 3
INFO:  result is: <NULL>
--2--------return 变量运算
CREATE or replace FUNCTION func2(in a integer, out b integer)
RETURNS int
AS $$
DECLARE
    c int;
    BEGIN
        c := 1;
        b := a + c;
        return b + c;
    END; $$
LANGUAGE 'plsql' NOT FENCED;
WARNING:  Due to compatibility issues, plsql language has been replaced by plpgsql language. Do not use plsql language in the future.
DETAIL:  N/A.
select func2(2, null);
 func2 
-------
     4
(1 row)

call func2(2, NULL);
 func2 | b 
-------+---
     4 | 3
(1 row)

select * from func2(2,null);
 func2 | b 
-------+---
     4 | 3
(1 row)

declare
    result integer;
    a integer := 2;
    b integer := NULL;
begin 
    result := func2(a => a, b => b);  
    raise info 'b is: %', b;
    raise info 'result is: %', result;
end;
/
INFO:  b is: 3
INFO:  result is: 4
declare
    result integer;
    a integer := 2;
    b integer := NULL;
begin  
    func2(a => a, b => b);   
    raise info 'b is: %', b;
    raise info 'result is: %', result;
end;
/
INFO:  b is: 3
INFO:  result is: <NULL>
--3------return 常量
CREATE or replace FUNCTION func3(in a integer, out b integer)
RETURNS int
AS $$
DECLARE
    c int;
    BEGIN
        c := 1;
        b := a + c;
        return 123;
    END; $$
LANGUAGE 'plsql' NOT FENCED;
WARNING:  Due to compatibility issues, plsql language has been replaced by plpgsql language. Do not use plsql language in the future.
DETAIL:  N/A.
select func3(2, null);
 func3 
-------
   123
(1 row)

call func3(2, NULL);
 func3 | b 
-------+---
   123 | 3
(1 row)

select * from func3(2,null);
 func3 | b 
-------+---
   123 | 3
(1 row)

declare
    result integer;
    a integer := 2;
    b integer := NULL;
begin 
    result := func3(a => a, b => b);  
    raise info 'b is: %', b;
    raise info 'result is: %', result;
end;
/
INFO:  b is: 3
INFO:  result is: 123
declare
    result integer;
    a integer := 2;
    b integer := NULL;
begin  
    func3(a => a, b => b);   
    raise info 'b is: %', b;
    raise info 'result is: %', result;
end;
/
INFO:  b is: 3
INFO:  result is: <NULL>
--4------多out
CREATE or replace FUNCTION func4(in a integer, out b integer, out d integer)
RETURNS int
AS $$
DECLARE
    c int;
    BEGIN
        c := 1;
        b := a + c;
        d := a + c;
        return c;
    END; $$
LANGUAGE 'plsql' NOT FENCED;
WARNING:  Due to compatibility issues, plsql language has been replaced by plpgsql language. Do not use plsql language in the future.
DETAIL:  N/A.
select func4(2,NULL,NULL);
 func4 
-------
     1
(1 row)

call func4(2, NULL,NULL);
 func4 | b | d 
-------+---+---
     1 | 3 | 3
(1 row)

select * from func4(2, NULL,NULL);
 func4 | b | d 
-------+---+---
     1 | 3 | 3
(1 row)

declare
    result integer;
    a integer := 2;
    b integer := NULL;
    d integer := NULL;
begin  
    result := func4(a => a, b => b,d => d);
    raise info 'b is: %', b;
	 raise info 'd is: %', d;
    raise info 'result is: %', result;
end;
/
INFO:  b is: 3
INFO:  d is: 3
INFO:  result is: 1
declare
    result integer;
    a integer := 2;
    b integer := NULL;
    d integer := NULL;
begin  
    func4(a => a, b => b,d => d);
    raise info 'b is: %', b;
	 raise info 'd is: %', d;
    raise info 'result is: %', result;
end;
/
INFO:  b is: 3
INFO:  d is: 3
INFO:  result is: <NULL>
--5-- 有out+ 无return 不支持，在执行时报错--
--5.1
CREATE or replace FUNCTION func5_1(in a integer, out b integer)
RETURNS int
AS $$
DECLARE
    c int;
    BEGIN
        c := 1;
        b := a + c;
        --return;
    END; $$
LANGUAGE 'plsql' NOT FENCED;
WARNING:  Due to compatibility issues, plsql language has been replaced by plpgsql language. Do not use plsql language in the future.
DETAIL:  N/A.
select func5_1(2, NULL);
ERROR:  Value assignment for the out parameter in plpgsql language functions, Unsupported return nothing in PL/pgSQL function
DETAIL:  N/A
CONTEXT:  PL/pgSQL function func5_1(integer) line 0 at RETURN
referenced column: func5_1
call func5_1(2, NULL);
ERROR:  Value assignment for the out parameter in plpgsql language functions, Unsupported return nothing in PL/pgSQL function
DETAIL:  N/A
CONTEXT:  PL/pgSQL function func5_1(integer) line 0 at RETURN
select * from func5_1(2, NULL);
ERROR:  Value assignment for the out parameter in plpgsql language functions, Unsupported return nothing in PL/pgSQL function
DETAIL:  N/A
CONTEXT:  PL/pgSQL function func5_1(integer) line 0 at RETURN
declare
    result integer;
    a integer := 2;
    b integer := NULL;
begin  
    result := func5_1(a => a, b => b);
    raise info 'b is: %', b;
    raise info 'result is: %', result;
end;
/
ERROR:  Value assignment for the out parameter in plpgsql language functions, Unsupported return nothing in PL/pgSQL function
DETAIL:  N/A
CONTEXT:  PL/pgSQL function func5_1(integer) line 0 at RETURN
SQL statement "CALL func5_1(a => a,b=>b)"
PL/pgSQL function inline_code_block line 5 at assignment
declare
    result integer;
    a integer := 2;
    b integer := NULL;
begin  
    func5_1(a => a, b => b);
    raise info 'b is: %', b;
    raise info 'result is: %', result;
end;
/
ERROR:  Value assignment for the out parameter in plpgsql language functions, Unsupported return nothing in PL/pgSQL function
DETAIL:  N/A
CONTEXT:  PL/pgSQL function func5_1(integer) line 0 at RETURN
SQL statement "CALL func5_1(a => a,b=>b)"
PL/pgSQL function inline_code_block line 5 at SQL statement
--5.2
CREATE or replace FUNCTION func5_2(in a integer, out b integer)
RETURNS int
AS $$
DECLARE
    c int;
    BEGIN
        c := 1;
        b := a + c;
        return;
    END; $$
LANGUAGE 'plsql' NOT FENCED;
WARNING:  Due to compatibility issues, plsql language has been replaced by plpgsql language. Do not use plsql language in the future.
DETAIL:  N/A.
select func5_2(2, NULL);
ERROR:  Value assignment for the out parameter in plpgsql language functions, Unsupported return nothing in PL/pgSQL function
DETAIL:  N/A
CONTEXT:  PL/pgSQL function func5_2(integer) line 7 at RETURN
referenced column: func5_2
call func5_2(2, NULL);
ERROR:  Value assignment for the out parameter in plpgsql language functions, Unsupported return nothing in PL/pgSQL function
DETAIL:  N/A
CONTEXT:  PL/pgSQL function func5_2(integer) line 7 at RETURN
select * from func5_2(2, NULL);
ERROR:  Value assignment for the out parameter in plpgsql language functions, Unsupported return nothing in PL/pgSQL function
DETAIL:  N/A
CONTEXT:  PL/pgSQL function func5_2(integer) line 7 at RETURN
declare
    result integer;
    a integer := 2;
    b integer := NULL;
begin  
    result := func5_2(a => a, b => b);
    raise info 'b is: %', b;
    raise info 'result is: %', result;
end;
/
ERROR:  Value assignment for the out parameter in plpgsql language functions, Unsupported return nothing in PL/pgSQL function
DETAIL:  N/A
CONTEXT:  PL/pgSQL function func5_2(integer) line 7 at RETURN
SQL statement "CALL func5_2(a => a,b=>b)"
PL/pgSQL function inline_code_block line 5 at assignment
declare
    result integer;
    a integer := 2;
    b integer := NULL;
begin  
    func5_2(a => a, b => b);
    raise info 'b is: %', b;
    raise info 'result is: %', result;
end;
/
ERROR:  Value assignment for the out parameter in plpgsql language functions, Unsupported return nothing in PL/pgSQL function
DETAIL:  N/A
CONTEXT:  PL/pgSQL function func5_2(integer) line 7 at RETURN
SQL statement "CALL func5_2(a => a,b=>b)"
PL/pgSQL function inline_code_block line 5 at SQL statement
--6自治事务
--6.1 单out
CREATE or replace FUNCTION func6_1(in a integer, out b integer)
RETURNS int
AS $$
DECLARE
	PRAGMA AUTONOMOUS_TRANSACTION; 
    c int;
    BEGIN
        c := 1;
        b := a + c;
        return c;
    END; $$
LANGUAGE 'plsql' NOT FENCED;
WARNING:  Due to compatibility issues, plsql language has been replaced by plpgsql language. Do not use plsql language in the future.
DETAIL:  N/A.
select func6_1(2, null);
 func6_1 
---------
       1
(1 row)

call func6_1(2, NULL);
 func6_1 | b 
---------+---
       1 | 3
(1 row)

select * from func6_1(2,null);
 func6_1 | b 
---------+---
       1 | 3
(1 row)

declare
    result integer;
    a integer := 2;
    b integer := NULL;
begin 
    result := func6_1(a => a, b => b);  
    raise info 'b is: %', b;
    raise info 'result is: %', result;
end;
/
INFO:  b is: 3
INFO:  result is: 1
declare
    result integer;
    a integer := 2;
    b integer := NULL;
begin  
    func6_1(a => a, b => b);   
    raise info 'b is: %', b;
    raise info 'result is: %', result;
end;
/
INFO:  b is: 3
INFO:  result is: <NULL>
--6.2 多out
CREATE or replace FUNCTION func6_2(in a integer, out b integer, out d integer)
RETURNS int
AS $$
DECLARE
	PRAGMA AUTONOMOUS_TRANSACTION;
    c int;
    BEGIN
        c := 1;
        b := a + c;
        d := a + c;
        return c;
    END; $$
LANGUAGE 'plsql' NOT FENCED;
WARNING:  Due to compatibility issues, plsql language has been replaced by plpgsql language. Do not use plsql language in the future.
DETAIL:  N/A.
select func6_2(2,NULL,NULL);
 func6_2 
---------
       1
(1 row)

call func6_2(2, NULL,NULL);
 func6_2 | b | d 
---------+---+---
       1 | 3 | 3
(1 row)

select * from func6_2(2, NULL,NULL);
 func6_2 | b | d 
---------+---+---
       1 | 3 | 3
(1 row)

declare
    result integer;
    a integer := 2;
    b integer := NULL;
    d integer := NULL;
begin  
    result := func6_2(a => a, b => b,d => d);
    raise info 'b is: %', b;
	 raise info 'd is: %', d;
    raise info 'result is: %', result;
end;
/
INFO:  b is: 3
INFO:  d is: 3
INFO:  result is: 1
declare
    result integer;
    a integer := 2;
    b integer := NULL;
    d integer := NULL;
begin  
    func6_2(a => a, b => b,d => d);
    raise info 'b is: %', b;
	 raise info 'd is: %', d;
    raise info 'result is: %', result;
end;
/
INFO:  b is: 3
INFO:  d is: 3
INFO:  result is: <NULL>
--7 packge
--7.1普通out出参
create or replace package pck7_1
is
function func7_1(in a int, out b int)
return int LANGUAGE 'plsql';
end pck7_1;
/ 
CREATE or replace package body pck7_1 as FUNCTION func7_1(in a int, out b integer)
RETURN int LANGUAGE 'plsql1'
AS 
DECLARE
	--PRAGMA AUTONOMOUS_TRANSACTION; 
	c int;
    BEGIN
        c := 1;
        b := a + c;
        return c;
    END;
end pck7_1;
/
select pck7_1.func7_1(2, null);
 func7_1 
---------
       1
(1 row)

call pck7_1.func7_1(2, NULL);
 func7_1 | b 
---------+---
       1 | 3
(1 row)

select * from pck7_1.func7_1(2,null);
 func7_1 | b 
---------+---
       1 | 3
(1 row)

declare
    result integer;
    a integer := 2;
    b integer := NULL;
begin 
    result := pck7_1.func7_1(a => a, b => b);  
    raise info 'b is: %', b;
    raise info 'result is: %', result;
end;
/
INFO:  b is: 3
INFO:  result is: 1
declare
    result integer;
    a integer := 2;
    b integer := NULL;
begin  
    pck7_1.func7_1(a => a, b => b);   
    raise info 'b is: %', b;
    raise info 'result is: %', result;
end;
/
INFO:  b is: 3
INFO:  result is: <NULL>
--7.2带自治事务out出参
create or replace package pck7_2
is
function func7_2(in a int, out b int)
return int LANGUAGE 'plsql';
end pck7_2;
/ 
CREATE or replace package body pck7_2 as FUNCTION func7_2(in a int, out b integer)
RETURN int LANGUAGE 'plsql1'
AS 
DECLARE
	PRAGMA AUTONOMOUS_TRANSACTION; 
	c int;
    BEGIN
        c := 1;
        b := a + c;
        return c;
    END;
end pck7_2;
/
select pck7_2.func7_2(2, null);
 func7_2 
---------
       1
(1 row)

call pck7_2.func7_2(2, NULL);
 func7_2 | b 
---------+---
       1 | 3
(1 row)

select * from pck7_2.func7_2(2,null);
 func7_2 | b 
---------+---
       1 | 3
(1 row)

declare
    result integer;
    a integer := 2;
    b integer := NULL;
begin 
    result := pck7_2.func7_2(a => a, b => b);  
    raise info 'b is: %', b;
    raise info 'result is: %', result;
end;
/
INFO:  b is: 3
INFO:  result is: 1
declare
    result integer;
    a integer := 2;
    b integer := NULL;
begin  
    pck7_2.func7_2(a => a, b => b);   
    raise info 'b is: %', b;
    raise info 'result is: %', result;
end;
/
INFO:  b is: 3
INFO:  result is: <NULL>
--clean
reset enable_create_plsql_language;
ERROR:  unrecognized configuration parameter "enable_create_plsql_language"
reset behavior_compat_options;
drop schema out_param_schema cascade;
NOTICE:  drop cascades to 12 other objects
DETAIL:  drop cascades to function func1(integer)
drop cascades to function func2(integer)
drop cascades to function func3(integer)
drop cascades to function func4(integer)
drop cascades to function func5_1(integer)
drop cascades to function func5_2(integer)
drop cascades to function func6_1(integer)
drop cascades to function func6_2(integer)
--?.*
drop cascades to function out_param_schema.func7_1(integer)
--?.*
drop cascades to function out_param_schema.func7_2(integer)
