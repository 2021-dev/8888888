-- It's generally bad style to use CREATE OR REPLACE unnecessarily.
-- Test what happens if an extension does it anyway.
-- Replacing a shell type or operator is sort of like CREATE OR REPLACE;
-- check that too.
CREATE TABLE test_ext_table (a int);
CREATE FUNCTION ext_cor_func() RETURNS text
  AS $$ SELECT 'ext_cor_func: original'::text $$ LANGUAGE sql;
CREATE EXTENSION test_ext_cor;  -- fail
ERROR:  function ext_cor_func() is not a member of extension "test_ext_cor"
DETAIL:  An extension is not allowed to replace an object that it does not own.
SELECT ext_cor_func();
      ext_cor_func      
------------------------
 ext_cor_func: original
(1 row)

DROP FUNCTION ext_cor_func();
CREATE VIEW ext_cor_view AS
  SELECT 'ext_cor_view: original'::text AS col;
CREATE EXTENSION test_ext_cor;  -- fail
ERROR:  view ext_cor_view is not a member of extension "test_ext_cor"
DETAIL:  An extension is not allowed to replace an object that it does not own.
SELECT ext_cor_func();
ERROR:  function ext_cor_func() does not exist
LINE 1: SELECT ext_cor_func();
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
CONTEXT:  referenced column: ext_cor_func
SELECT * FROM ext_cor_view;
          col           
------------------------
 ext_cor_view: original
(1 row)

DROP VIEW ext_cor_view;
CREATE TYPE test_ext_type;
CREATE EXTENSION test_ext_cor;  -- fail
ERROR:  type test_ext_type is not a member of extension "test_ext_cor"
DETAIL:  An extension is not allowed to replace an object that it does not own.
DROP TYPE test_ext_type;
-- this makes a shell "point <<@@ polygon" operator too
CREATE OPERATOR @@>> ( PROCEDURE = poly_contain_pt,
  LEFTARG = polygon, RIGHTARG = point,
    COMMUTATOR = <<@@ );
CREATE EXTENSION test_ext_cor;  -- fail
ERROR:  operator <<@@(point,polygon) is not a member of extension "test_ext_cor"
DETAIL:  An extension is not allowed to replace an object that it does not own.
DROP OPERATOR <<@@ (point, polygon);
CREATE PACKAGE test_ext_pkg as
procedure test_ext_pro;
END test_ext_pkg;
/
CREATE PACKAGE BODY test_ext_pkg as
procedure test_ext_pro as
begin
raise info 'ext_pkg_pro: original';
end;
END test_ext_pkg;
/
CREATE EXTENSION test_ext_cor;  -- fail
--?ERROR:  package ^[0-9]*$ is not a member of extension "test_ext_cor"
DETAIL:  An extension is not allowed to replace an object that it does not own.
DROP PACKAGE test_ext_pkg;
NOTICE:  drop cascades to function public.test_ext_pro()
CREATE SYNONYM test_ext_synonym FOR test_ext_table;
CREATE EXTENSION test_ext_cor;  -- fail
ERROR:  synonym public.test_ext_synonym is not a member of extension "test_ext_cor"
DETAIL:  An extension is not allowed to replace an object that it does not own.
DROP SYNONYM test_ext_synonym;
CREATE DIRECTORY test_ext_dir AS '/tmp';
CREATE EXTENSION test_ext_cor;  -- fail
ERROR:  directory test_ext_dir is not a member of extension "test_ext_cor"
DETAIL:  An extension is not allowed to replace an object that it does not own.
DROP DIRECTORY test_ext_dir;
CREATE EXTENSION test_ext_cor;  -- now it should work
SELECT ext_cor_func();
         ext_cor_func         
------------------------------
 ext_cor_func: from extension
(1 row)

SELECT * FROM ext_cor_view;
             col              
------------------------------
 ext_cor_view: from extension
(1 row)

SELECT 'x'::test_ext_type;
 test_ext_type 
---------------
 x
(1 row)

SELECT point(0,0) <<@@ polygon(circle(point(0,0),1));
 ?column? 
----------
 t
(1 row)

SELECT test_ext_pkg.test_ext_pro();
INFO:  ext_pkg_pro: extension
CONTEXT:  referenced column: test_ext_pro
 test_ext_pro 
--------------
 
(1 row)

\dx+ test_ext_cor
Objects in extension "test_ext_cor"
       Object Description        
---------------------------------
 directory test_ext_dir
 function ext_cor_func()
 function public.test_ext_pro()
 operator <<@@(point,polygon)
--? package ^[0-9]*$
 synonym public.test_ext_synonym
 type test_ext_type
 view ext_cor_view
(8 rows)

--
-- CREATE IF NOT EXISTS is an entirely unsound thing for an extension
-- to be doing, but let's at least plug the major security hole in it.
--
CREATE TABLE ext_cine_tab1 (x int);
CREATE EXTENSION test_ext_cine;  -- fail
ERROR:  table ext_cine_tab1 is not a member of extension "test_ext_cine"
DETAIL:  An extension may only use CREATE ... IF NOT EXISTS to skip object creationif the conflicting object is one that it already owns.
DROP TABLE ext_cine_tab1;
CREATE EXTENSION test_ext_cine;
\dx+ test_ext_cine
Objects in extension "test_ext_cine"
 Object Description  
---------------------
 table ext_cine_tab1
(1 row)

ALTER EXTENSION test_ext_cine UPDATE TO '1.1';
\dx+ test_ext_cine
Objects in extension "test_ext_cine"
 Object Description  
---------------------
 table ext_cine_tab1
 table ext_cine_tab3
(2 rows)

