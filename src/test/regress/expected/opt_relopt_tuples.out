create schema opt_relopt_tuples;
set search_path = opt_relopt_tuples;
--test opt value - negative
create table test(a int) with (min_tuples = -1);
ERROR:  value -1 out of bounds for option "min_tuples"
DETAIL:  Valid values are between "0.000000" and "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000".
create table test(a int) with (min_tuples = -0.1);
ERROR:  value -0.1 out of bounds for option "min_tuples"
DETAIL:  Valid values are between "0.000000" and "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000".
create table test(a int) with (min_tuples = 9223372036854775807);
alter table test set (min_tuples = 9223372036854775808);
alter table test set (min_tuples = 1e20);
alter table test set (min_tuples = true);
ERROR:  invalid value for floating point option "min_tuples": true
--astore
create table t_astore (a int, b int) with (min_tuples = 1000, storage_type = astore);
insert into t_astore values(1,2);
analyze t_astore;
explain select * from t_astore;
--?.*
--?.*
--? Seq Scan on t_astore  \(cost=.* rows=1000 width=8\)
(1 row)

prepare p1 as select /*+ use_cplan */ * from t_astore;
explain execute p1;
--?.*
--?.*
--? Seq Scan on t_astore  \(cost=.* rows=1000 width=8\)
(1 row)

prepare p2 as select /*+ use_gplan */ * from t_astore;
explain execute p2;
--?.*
--?.*
--? Seq Scan on t_astore  \(cost=.* rows=1000 width=8\)
(1 row)

\d+ t_astore
                 Table "opt_relopt_tuples.t_astore"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a      | integer |           | plain   |              | 
 b      | integer |           | plain   |              | 
Has OIDs: no
Options: orientation=row, min_tuples=1000, storage_type=astore, compression=no

select reltuples from pg_class where oid = 'opt_relopt_tuples.t_astore'::regclass;
 reltuples 
-----------
         1
(1 row)

deallocate all;
alter table t_astore reset(min_tuples);
analyze t_astore;
explain select * from t_astore;
--?.*
--?.*
--? Seq Scan on t_astore  \(cost=.* rows=1 width=8\)
(1 row)

prepare p1 as select /*+ use_cplan */ * from t_astore;
explain execute p1;
--?.*
--?.*
--? Seq Scan on t_astore  \(cost=.* rows=1 width=8\)
(1 row)

prepare p2 as select /*+ use_gplan */ * from t_astore;
explain execute p2;
--?.*
--?.*
--? Seq Scan on t_astore  \(cost=.* rows=1 width=8\)
(1 row)

\d+ t_astore
                 Table "opt_relopt_tuples.t_astore"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a      | integer |           | plain   |              | 
 b      | integer |           | plain   |              | 
Has OIDs: no
Options: orientation=row, storage_type=astore, compression=no

select reltuples from pg_class where oid = 'opt_relopt_tuples.t_astore'::regclass;
 reltuples 
-----------
         1
(1 row)

deallocate all;
--ustore
create table t_ustore (a int, b int) with (min_tuples = 0, storage_type = ustore);
insert into t_ustore values(1,2);
analyze t_ustore;
explain select * from t_ustore;
--?.*
--?.*
--? Seq Scan on t_ustore  \(cost=.* rows=1 width=8\)
(1 row)

prepare p1 as select /*+ use_cplan */ * from t_ustore;
explain execute p1;
--?.*
--?.*
--? Seq Scan on t_ustore  \(cost=.* rows=1 width=8\)
(1 row)

prepare p2 as select /*+ use_gplan */ * from t_ustore;
explain execute p2;
--?.*
--?.*
--? Seq Scan on t_ustore  \(cost=.* rows=1 width=8\)
(1 row)

\d+ t_ustore
                 Table "opt_relopt_tuples.t_ustore"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a      | integer |           | plain   |              | 
 b      | integer |           | plain   |              | 
Has OIDs: no
Options: orientation=row, min_tuples=0, storage_type=ustore, compression=no

select reltuples from pg_class where oid = 'opt_relopt_tuples.t_ustore'::regclass;
 reltuples 
-----------
         1
(1 row)

deallocate all;
alter table t_ustore set (min_tuples = 100);
analyze t_ustore;
explain select * from t_ustore;
--?.*
--?.*
--? Seq Scan on t_ustore  \(cost=.* rows=100 width=8\)
(1 row)

prepare p1 as select /*+ use_cplan */ * from t_ustore;
explain execute p1;
--?.*
--?.*
--? Seq Scan on t_ustore  \(cost=.* rows=100 width=8\)
(1 row)

prepare p2 as select /*+ use_gplan */ * from t_ustore;
explain execute p2;
--?.*
--?.*
--? Seq Scan on t_ustore  \(cost=.* rows=100 width=8\)
(1 row)

\d+ t_ustore
                 Table "opt_relopt_tuples.t_ustore"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a      | integer |           | plain   |              | 
 b      | integer |           | plain   |              | 
Has OIDs: no
Options: orientation=row, storage_type=ustore, compression=no, min_tuples=100

select reltuples from pg_class where oid = 'opt_relopt_tuples.t_ustore'::regclass;
 reltuples 
-----------
         1
(1 row)

deallocate all;
explain select * from t_ustore where a < 10;
--?.*
--?.*
--? Seq Scan on t_ustore  \(cost=.* rows=50 width=8\)
   Filter: (a < 10)
(2 rows)

prepare p1 as select /*+ use_cplan */ * from t_ustore where a < 100;
explain execute p1;
--?.*
--?.*
--? Seq Scan on t_ustore  \(cost=.* rows=50 width=8\)
   Filter: (a < 100)
(2 rows)

prepare p2 as select /*+ use_gplan */ * from t_ustore where a < 200;
explain execute p2;
--?.*
--?.*
--? Seq Scan on t_ustore  \(cost=.* rows=50 width=8\)
   Filter: (a < 200)
(2 rows)

deallocate all;
insert into t_ustore values(generate_series(1,500), 1);
analyze t_ustore;
explain select * from t_ustore;
--?.*
--?.*
--? Seq Scan on t_ustore  \(cost=.* rows=501 width=8\)
(1 row)

prepare p1 as select /*+ use_cplan */ * from t_ustore;
explain execute p1;
--?.*
--?.*
--? Seq Scan on t_ustore  \(cost=.* rows=501 width=8\)
(1 row)

prepare p2 as select /*+ use_gplan */ * from t_ustore;
explain execute p2;
--?.*
--?.*
--? Seq Scan on t_ustore  \(cost=.* rows=501 width=8\)
(1 row)

deallocate all;
explain select * from t_ustore where a < 10;
--?.*
--?.*
--? Seq Scan on t_ustore  \(cost=.* rows=11 width=8\)
   Filter: (a < 10)
(2 rows)

prepare p1 as select /*+ use_cplan */ * from t_ustore where a < 100;
explain execute p1;
--?.*
--?.*
--? Seq Scan on t_ustore  \(cost=.* rows=101 width=8\)
   Filter: (a < 100)
(2 rows)

prepare p2 as select /*+ use_gplan */ * from t_ustore where a < 200;
explain execute p2;
--?.*
--?.*
--? Seq Scan on t_ustore  \(cost=.* rows=201 width=8\)
   Filter: (a < 200)
(2 rows)

deallocate all;
--partition
create table t_part(a int, b int)
with (storage_type = ustore)
partition by range (a)
(
    partition t_part_p1 values less than (10),
    partition t_part_p2 values less than (20),
    partition t_part_p3 values less than (30)
);
insert into t_part values(1,2);
analyze t_part;
explain select * from t_part;
--?.*
--?.*
--? Partition Iterator  \(cost=.* rows=1 width=8\)
   Iterations: 3
--?   ->  Partitioned Seq Scan on t_part  \(cost=.* rows=1 width=8\)
         Selected Partitions:  1..3
(4 rows)

prepare p1 as select /*+ use_cplan */ * from t_part;
explain execute p1;
--?.*
--?.*
--? Partition Iterator  \(cost=.* rows=1 width=8\)
   Iterations: 3
--?   ->  Partitioned Seq Scan on t_part  \(cost=.* rows=1 width=8\)
         Selected Partitions:  1..3
(4 rows)

prepare p2 as select /*+ use_gplan */ * from t_part;
explain execute p2;
--?.*
--?.*
--? Partition Iterator  \(cost=.* rows=1 width=8\)
   Iterations: 3
--?   ->  Partitioned Seq Scan on t_part  \(cost=.* rows=1 width=8\)
         Selected Partitions:  1..3
(4 rows)

\d+ t_part
                  Table "opt_relopt_tuples.t_part"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a      | integer |           | plain   |              | 
 b      | integer |           | plain   |              | 
Partition By RANGE(a)
Number of partitions: 3 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, storage_type=ustore, compression=no

select reltuples from pg_class where oid = 'opt_relopt_tuples.t_part'::regclass;
 reltuples 
-----------
         1
(1 row)

deallocate all;
alter table t_part set (min_tuples = 999);
analyze t_part;
explain select * from t_part;
--?.*
--?.*
--? Partition Iterator  \(cost=.* rows=999 width=8\)
   Iterations: 3
--?   ->  Partitioned Seq Scan on t_part  \(cost=.* rows=999 width=8\)
         Selected Partitions:  1..3
(4 rows)

prepare p1 as select /*+ use_cplan */ * from t_part;
explain execute p1;
--?.*
--?.*
--? Partition Iterator  \(cost=.* rows=999 width=8\)
   Iterations: 3
--?   ->  Partitioned Seq Scan on t_part  \(cost=.* rows=999 width=8\)
         Selected Partitions:  1..3
(4 rows)

prepare p2 as select /*+ use_gplan */ * from t_part;
explain execute p2;
--?.*
--?.*
--? Partition Iterator  \(cost=.* rows=999 width=8\)
   Iterations: 3
--?   ->  Partitioned Seq Scan on t_part  \(cost=.* rows=999 width=8\)
         Selected Partitions:  1..3
(4 rows)

\d+ t_part
                  Table "opt_relopt_tuples.t_part"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a      | integer |           | plain   |              | 
 b      | integer |           | plain   |              | 
Partition By RANGE(a)
Number of partitions: 3 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, storage_type=ustore, compression=no, min_tuples=999

select reltuples from pg_class where oid = 'opt_relopt_tuples.t_part'::regclass;
 reltuples 
-----------
         1
(1 row)

deallocate all;
--gtt
create global temp table t_gtt (a int, b int) with (min_tuples = 996);
insert into t_gtt values(1,2);
analyze t_gtt;
explain select * from t_gtt;
--?.*
--?.*
--? Seq Scan on t_gtt  \(cost=.* rows=996 width=8\)
(1 row)

prepare p1 as select /*+ use_cplan */ * from t_gtt;
explain execute p1;
--?.*
--?.*
--? Seq Scan on t_gtt  \(cost=.* rows=996 width=8\)
(1 row)

prepare p2 as select /*+ use_gplan */ * from t_gtt;
explain execute p2;
--?.*
--?.*
--? Seq Scan on t_gtt  \(cost=.* rows=996 width=8\)
(1 row)

\d+ t_gtt
                   Table "opt_relopt_tuples.t_gtt"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a      | integer |           | plain   |              | 
 b      | integer |           | plain   |              | 
Has OIDs: no
Options: orientation=row, min_tuples=996, compression=no, on_commit_delete_rows=false

select reltuples from pg_class where oid = 'opt_relopt_tuples.t_gtt'::regclass;
 reltuples 
-----------
         0
(1 row)

select reltuples from pg_get_gtt_relstats('opt_relopt_tuples.t_gtt'::regclass);
 reltuples 
-----------
         1
(1 row)

deallocate all;
--ltt
create temp table t_ltt (a int, b int) with (min_tuples = 609);
insert into t_ltt values(1,2);
analyze t_ltt;
explain select * from t_ltt;
--?.*
--?.*
--? Seq Scan on t_ltt  \(cost=.* rows=609 width=8\)
(1 row)

prepare p1 as select /*+ use_cplan */ * from t_ltt;
explain execute p1;
--?.*
--?.*
--? Seq Scan on t_ltt  \(cost=.* rows=609 width=8\)
(1 row)

prepare p2 as select /*+ use_gplan */ * from t_ltt;
explain execute p2;
--?.*
--?.*
--? Seq Scan on t_ltt  \(cost=.* rows=609 width=8\)
(1 row)

\d+ t_ltt
--?.*
--?.*
--?.*
 a      | integer |           | plain   |              | 
 b      | integer |           | plain   |              | 
Has OIDs: no
Options: orientation=row, min_tuples=609, compression=no

deallocate all;
drop schema opt_relopt_tuples cascade;
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to table test
drop cascades to table t_astore
drop cascades to table t_ustore
drop cascades to table t_part
drop cascades to table t_gtt
